{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Roman-cuts","text":"<p>Lightweight package to create image cutouts from simulations made with <code>RImTimSim</code></p>"},{"location":"#install","title":"Install","text":"<p>Easy install with PyPI <pre><code>pip install roman-cuts\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":"<p>For more details check out the notebook tutorial here.</p> <pre><code>from roman_cuts import RomanCuts\n\n# make a list of your local FITS files\nfl = paths to local FITS files\n\nrcube = RomanCuts(field=3, sca=1, filter=\"F146\", file_list=fl)\n\n# using sky coord coordinates\nradec = (268.461687, -29.232092)\nrcube.make_cutout(radec=radec, size=(21, 21), dithered=True)\n\n# or using rowcol pixel coordinates\nrowcol = (256, 256)\nrcube.make_cutout(rowcol=rowcol, size=(11, 11), dithered=False)\n\n# we can save to disk, default is ASDF\nrcube.save_cutout()\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>The figure shows a sequence of 21x21 pixel cutouts taken from the FFI simulations  centered on the target RA, Decl = (268.5112137932491, -29.24473947250156). This account for dithered observations</p> <p></p> <p>The data is saved into a ASDF file as shown below:</p> <p></p>"},{"location":"cube/","title":"<code>RomanCuts</code>","text":""},{"location":"cube/#src.roman_cuts.RomanCuts","title":"RomanCuts","text":"<p>A class to create cutouts from Roman WFI simulated images created by TRExS group using the <code>RImTimSim</code> package.</p> <p>The class provides access to:     - Per frame WCS     - Season average WCS     - Cutout cubes (ntime, npix, npix) from the simulated FFI stack     - Save cubes to disk as ASDF</p>"},{"location":"cube/#src.roman_cuts.RomanCuts.__init__","title":"__init__","text":"<pre><code>__init__(\n    field: int,\n    sca: int,\n    filter: str = \"F146\",\n    file_list: list = [],\n)\n</code></pre> <p>Initializes the class with field, scs, filter, and file_list.</p> <p>Parameters:</p> <ul> <li> <code>field</code>               (<code>int</code>)           \u2013            <p>The field number.</p> </li> <li> <code>sca</code>               (<code>int</code>)           \u2013            <p>The instrument Sensor Chip Assembly number.</p> </li> <li> <code>filter</code>               (<code>str</code>, default:                   <code>'F146'</code> )           \u2013            <p>The filter string (e.g., \"F146\"). Default is \"F146\".</p> </li> <li> <code>file_list</code>               (<code>list</code>, default:                   <code>[]</code> )           \u2013            <p>A list of file paths. Default is an empty list.</p> </li> </ul>"},{"location":"cube/#src.roman_cuts.RomanCuts.get_average_wcs","title":"get_average_wcs","text":"<pre><code>get_average_wcs()\n</code></pre> <p>Computes an average WCS from all available frames</p>"},{"location":"cube/#src.roman_cuts.RomanCuts.get_all_wcs","title":"get_all_wcs","text":"<pre><code>get_all_wcs()\n</code></pre> <p>Extracts WCS information from all FFI files.</p>"},{"location":"cube/#src.roman_cuts.RomanCuts.make_cutout","title":"make_cutout","text":"<pre><code>make_cutout(\n    radec: Tuple = (None, None),\n    rowcol: Tuple[int, int] = (0, 0),\n    size: Tuple[int, int] = (15, 15),\n    dithered: bool = False,\n)\n</code></pre> <p>Creates a cutout from the data.</p> <p>Parameters:</p> <ul> <li> <code>radec</code>               (<code>tuple of floats or None</code>, default:                   <code>(None, None)</code> )           \u2013            <p>Right ascension and declination coordinates (ra, dec). If None, rowcol is used. Default is (None, None).</p> </li> <li> <code>rowcol</code>               (<code>tuple of ints or None</code>, default:                   <code>(0, 0)</code> )           \u2013            <p>Row and column pixel coordinates (row, col). If None, radec is used. Default is (0, 0).</p> </li> <li> <code>size</code>               (<code>tuple of ints</code>, default:                   <code>(15, 15)</code> )           \u2013            <p>Size of the cutout in pixels (rows, columns). Default is (15, 15).</p> </li> </ul>"},{"location":"cube/#src.roman_cuts.RomanCuts.save_cutout","title":"save_cutout","text":"<pre><code>save_cutout(\n    output: Optional[str] = None, format: str = \"asdf\"\n)\n</code></pre> <p>Saves the cutout to a file.</p> <p>Parameters:</p> <ul> <li> <code>output</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The output file path. If None, a default filename is generated.</p> </li> <li> <code>format</code>               (<code>str</code>, default:                   <code>'asdf'</code> )           \u2013            <p>The file format (\"asdf\" or \"fits\"). Default is \"asdf\".</p> </li> </ul>"},{"location":"tutorial/","title":"Usage","text":"In\u00a0[1]: Copied! <pre>import os\nimport numpy as np\nfrom glob import glob\nfrom roman_cuts import RomanCuts\nimport matplotlib.pyplot as plt\n</pre> import os import numpy as np from glob import glob from roman_cuts import RomanCuts import matplotlib.pyplot as plt In\u00a0[2]: Copied! <pre>PATH = \"/Users/jimartin/Work/ROMAN/TRExS/simulations/dryrun_01\"\n\nFILTER = \"F146\"\nSCA = 2\nFIELD = 3\n</pre> PATH = \"/Users/jimartin/Work/ROMAN/TRExS/simulations/dryrun_01\"  FILTER = \"F146\" SCA = 2 FIELD = 3 In\u00a0[3]: Copied! <pre># get path for all FITS files in disk\nff = sorted(glob(f\"{PATH}/simulated_image_data/rimtimsim_WFI_lvl02_{FILTER}_SCA{SCA:02}_field{FIELD:02}_rampfitted_exposureno_*_sim.fits\"))\nprint(f\"There are {len(ff)} frames available in {FILTER}\")\n</pre> # get path for all FITS files in disk ff = sorted(glob(f\"{PATH}/simulated_image_data/rimtimsim_WFI_lvl02_{FILTER}_SCA{SCA:02}_field{FIELD:02}_rampfitted_exposureno_*_sim.fits\")) print(f\"There are {len(ff)} frames available in {FILTER}\") <pre>There are 3298 frames available in F146\n</pre> In\u00a0[4]: Copied! <pre># initialize RomanCuts object\nrcube = RomanCuts(field=3, sca=1, filter=\"F146\", file_list=ff)\nrcube\n</pre> # initialize RomanCuts object rcube = RomanCuts(field=3, sca=1, filter=\"F146\", file_list=ff) rcube Out[4]: <pre>Roman WFI Field 3 SCA 1 Filter F146 Frames 3298</pre> In\u00a0[5]: Copied! <pre># make a cutout using pixel row and column coordinates\n# with dithered=False the cutouts will be fixed tothe pixel grid\nrcube.make_cutout(rowcol=(254, 2925), size=(21, 21), dithered=False)\n</pre> # make a cutout using pixel row and column coordinates # with dithered=False the cutouts will be fixed tothe pixel grid rcube.make_cutout(rowcol=(254, 2925), size=(21, 21), dithered=False) <pre>Getting 3d data...\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3298/3298 [00:04&lt;00:00, 807.68it/s]\nGetting 1d arrays data...\nGetting metadata\n</pre> In\u00a0[6]: Copied! <pre># this is the center of the cutout \nrcube.ra, rcube.dec\n</pre> # this is the center of the cutout  rcube.ra, rcube.dec Out[6]: <pre>(array(268.45823483), array(-29.15501013))</pre> In\u00a0[7]: Copied! <pre># we have the flux and errors in 3d arrays\nrcube.flux.shape, rcube.flux_err.shape\n</pre> # we have the flux and errors in 3d arrays rcube.flux.shape, rcube.flux_err.shape Out[7]: <pre>((3298, 21, 21), (3298, 21, 21))</pre> In\u00a0[8]: Copied! <pre># we have the time, cadence numbe and quality flags\nrcube.time.shape, rcube.exposureno.shape, rcube.quality.shape\n</pre> # we have the time, cadence numbe and quality flags rcube.time.shape, rcube.exposureno.shape, rcube.quality.shape Out[8]: <pre>((3298,), (3298,), (3298,))</pre> In\u00a0[9]: Copied! <pre># and the metadata\nrcube.metadata\n</pre> # and the metadata rcube.metadata Out[9]: <pre>{'MISSION': 'Roman',\n 'TELESCOP': 'Roman',\n 'CREATOR': 'TRExS-roman-cuts',\n 'SOFTWARE': 'rimtimsim_v2.0',\n 'RADESYS': 'FK5',\n 'EQUINOX': 2000.0,\n 'FILTER': 'F146',\n 'FIELD': 3,\n 'DETECTOR': 'SCA02',\n 'EXPOSURE': 54.72,\n 'READMODE': 'rampfitted',\n 'TSTART': 2461450.4999847086,\n 'TEND': 2461485.510861832,\n 'RA_CEN': 268.4582348320807,\n 'DEC_CEN': -29.155010131364055,\n 'DITHERED': False,\n 'NTIMES': 3298,\n 'IMGSIZE': (21, 21)}</pre> In\u00a0[12]: Copied! <pre># we can check a few stamps\n\nfig, ax = plt.subplots(3,3, sharex=True, sharey=True, figsize=(12,9))\ntdx = np.random.choice(np.arange(rcube.nt), size=9, replace=False)\nfor axis, t in zip(ax.ravel(), tdx):\n    bar = axis.imshow(rcube.flux[t], \n                origin=\"lower\", \n                vmin=10, \n                vmax=500, \n                extent=(rcube.row.min(), rcube.row.max(), rcube.column.min(), rcube.column.max()),\n               )\n    axis.set_title(f\"Time {rcube.time[t]:.2f} [jd]\")\nplt.colorbar(bar, ax=ax, location=\"right\", label=\"Flux [-e/s]\" )\nplt.show()\n</pre> # we can check a few stamps  fig, ax = plt.subplots(3,3, sharex=True, sharey=True, figsize=(12,9)) tdx = np.random.choice(np.arange(rcube.nt), size=9, replace=False) for axis, t in zip(ax.ravel(), tdx):     bar = axis.imshow(rcube.flux[t],                  origin=\"lower\",                  vmin=10,                  vmax=500,                  extent=(rcube.row.min(), rcube.row.max(), rcube.column.min(), rcube.column.max()),                )     axis.set_title(f\"Time {rcube.time[t]:.2f} [jd]\") plt.colorbar(bar, ax=ax, location=\"right\", label=\"Flux [-e/s]\" ) plt.show() In\u00a0[13]: Copied! <pre># we save the cutout to disk as ASDF file \nrcube.save_cutout(output=\"./test.asdf\")\n</pre> # we save the cutout to disk as ASDF file  rcube.save_cutout(output=\"./test.asdf\") In\u00a0[14]: Copied! <pre>import asdf\n</pre> import asdf In\u00a0[18]: Copied! <pre>af = asdf.open(\"./test.asdf\")\naf.info()\n</pre> af = asdf.open(\"./test.asdf\") af.info() <pre>root (AsdfObject)\n\u251c\u2500asdf_library (Software)\n\u2502 \u251c\u2500author (str): The ASDF Developers\n\u2502 \u251c\u2500homepage (str): http://github.com/asdf-format/asdf\n\u2502 \u251c\u2500name (str): asdf\n\u2502 \u2514\u2500version (str): 4.1.0\n\u251c\u2500history (dict)\n\u2502 \u2514\u2500extensions (list)\n\u2502   \u251c\u2500[0] (ExtensionMetadata) ...\n\u2502   \u2514\u2500[1] (ExtensionMetadata) ...\n\u2514\u2500roman (dict)\n  \u251c\u2500data (dict)\n  \u2502 \u251c\u2500column (int): 2914\n  \u2502 \u251c\u2500exposureno (NDArrayType) ...\n  \u2502 \u251c\u2500flux (NDArrayType) ...\n  \u2502 \u251c\u2500flux_err (NDArrayType) ...\n  \u2502 \u251c\u2500quality (NDArrayType) ...\n  \u2502 \u251c\u2500row (int): 243\n  \u2502 \u2514\u2500time (NDArrayType) ...\n  \u251c\u2500meta (dict)\n  \u2502 \u251c\u2500CREATOR (str): TRExS-roman-cuts\n  \u2502 \u2514\u250017 not shown\n  \u2514\u2500wcs (list) ...\nSome nodes not shown.\n</pre> In\u00a0[19]: Copied! <pre># we can use sky coordinates to center the cutout\n# the target will be centeredaccounting for dithering\nradec = (268.5112137932491, -29.24473947250156)\n</pre> # we can use sky coordinates to center the cutout # the target will be centeredaccounting for dithering radec = (268.5112137932491, -29.24473947250156) In\u00a0[20]: Copied! <pre># we can request all WCSs, it will take a few seconds more\nrcube.make_cutout(radec=radec, size=(15, 15), dithered=True)\n</pre> # we can request all WCSs, it will take a few seconds more rcube.make_cutout(radec=radec, size=(15, 15), dithered=True) <pre>Using Ra, Dec coordinates and WCS per frame to center the cutout\nGetting 3d data...\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3298/3298 [00:01&lt;00:00, 1803.93it/s]\nGetting 1d arrays data...\nGetting metadata\n</pre> In\u00a0[22]: Copied! <pre>rcube.flux.shape\n</pre> rcube.flux.shape Out[22]: <pre>(3298, 15, 15)</pre> In\u00a0[23]: Copied! <pre># this time row and columns are [nt, npix]\nrcube.row, rcube.column\n</pre> # this time row and columns are [nt, npix] rcube.row, rcube.column Out[23]: <pre>(array([[3042, 3043, 3044, ..., 3054, 3055, 3056],\n        [3042, 3043, 3044, ..., 3054, 3055, 3056],\n        [3042, 3043, 3044, ..., 3054, 3055, 3056],\n        ...,\n        [3042, 3043, 3044, ..., 3054, 3055, 3056],\n        [3042, 3043, 3044, ..., 3054, 3055, 3056],\n        [3042, 3043, 3044, ..., 3054, 3055, 3056]]),\n array([[1070, 1071, 1072, ..., 1082, 1083, 1084],\n        [1071, 1072, 1073, ..., 1083, 1084, 1085],\n        [1071, 1072, 1073, ..., 1083, 1084, 1085],\n        ...,\n        [1071, 1072, 1073, ..., 1083, 1084, 1085],\n        [1070, 1071, 1072, ..., 1082, 1083, 1084],\n        [1073, 1074, 1075, ..., 1085, 1086, 1087]]))</pre> In\u00a0[26]: Copied! <pre># visual check of the cutouts centered in the target\nTs = np.random.choice(np.arange(rcube.nt), size=5*5, replace=False)\n\nfig, ax = plt.subplots(5,5,figsize=(15,15),sharex=True, sharey=True)\nfor t, axis in zip(Ts, ax.ravel()):\n    axis.pcolormesh(rcube.column[t], rcube.row[t], rcube.flux[t], vmin=10, vmax=500)\n    axis.scatter(rcube.target_pixel[t, 1],rcube.target_pixel[t, 0], c=\"tab:red\", s=10)\n    axis.set_title(f\"Frame # {t}\")\nplt.show()\n</pre> # visual check of the cutouts centered in the target Ts = np.random.choice(np.arange(rcube.nt), size=5*5, replace=False)  fig, ax = plt.subplots(5,5,figsize=(15,15),sharex=True, sharey=True) for t, axis in zip(Ts, ax.ravel()):     axis.pcolormesh(rcube.column[t], rcube.row[t], rcube.flux[t], vmin=10, vmax=500)     axis.scatter(rcube.target_pixel[t, 1],rcube.target_pixel[t, 0], c=\"tab:red\", s=10)     axis.set_title(f\"Frame # {t}\") plt.show() In\u00a0[24]: Copied! <pre># we can save the file to disk with default name\nrcube.save_cutout()\n</pre> # we can save the file to disk with default name rcube.save_cutout() <pre>Saving data to ./roman_cutout_field03_SCA02_268.5112_-29.2447_s15x15.asdf\n</pre> In\u00a0[25]: Copied! <pre># this one contains all the WCS per frame in the ASDF\naf = asdf.open(\"./roman_cutout_field03_SCA02_268.5112_-29.2447_s15x15.asdf\")\naf.info()\n</pre> # this one contains all the WCS per frame in the ASDF af = asdf.open(\"./roman_cutout_field03_SCA02_268.5112_-29.2447_s15x15.asdf\") af.info() <pre>root (AsdfObject)\n\u251c\u2500asdf_library (Software)\n\u2502 \u251c\u2500author (str): The ASDF Developers\n\u2502 \u251c\u2500homepage (str): http://github.com/asdf-format/asdf\n\u2502 \u251c\u2500name (str): asdf\n\u2502 \u2514\u2500version (str): 4.1.0\n\u251c\u2500history (dict)\n\u2502 \u2514\u2500extensions (list)\n\u2502   \u251c\u2500[0] (ExtensionMetadata) ...\n\u2502   \u2514\u2500[1] (ExtensionMetadata) ...\n\u2514\u2500roman (dict)\n  \u251c\u2500data (dict)\n  \u2502 \u251c\u2500column (NDArrayType) ...\n  \u2502 \u251c\u2500exposureno (NDArrayType) ...\n  \u2502 \u251c\u2500flux (NDArrayType) ...\n  \u2502 \u251c\u2500flux_err (NDArrayType) ...\n  \u2502 \u251c\u2500quality (NDArrayType) ...\n  \u2502 \u251c\u2500row (NDArrayType) ...\n  \u2502 \u2514\u2500time (NDArrayType) ...\n  \u251c\u2500meta (dict)\n  \u2502 \u251c\u2500CREATOR (str): TRExS-roman-cuts\n  \u2502 \u2514\u250017 not shown\n  \u2514\u2500wcs (list) ...\nSome nodes not shown.\n</pre> In\u00a0[31]: Copied! <pre># row and column in the ASDF have the lower-left corner pixel for each time\n# we can reconstruct the pixel grid at each time with that and the cutout size.\naf[\"roman\"][\"data\"][\"row\"], af[\"roman\"][\"data\"][\"column\"]\n</pre> # row and column in the ASDF have the lower-left corner pixel for each time # we can reconstruct the pixel grid at each time with that and the cutout size. af[\"roman\"][\"data\"][\"row\"], af[\"roman\"][\"data\"][\"column\"] Out[31]: <pre>(array([3042, 3042, 3042, ..., 3042, 3042, 3042]),\n array([1070, 1071, 1071, ..., 1071, 1070, 1073]))</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"tutorial/#roman-cuts","title":"Roman-Cuts\u00b6","text":"<p>A short tutorial on how to use <code>RomanCuts</code> to get cutouts from simulated images created with <code>RImTimSim</code> Link.</p>"},{"location":"tutorial/#fixed-pixel-coordinates","title":"Fixed pixel coordinates\u00b6","text":""},{"location":"tutorial/#accounting-for-dithering","title":"Accounting for Dithering\u00b6","text":""}]}